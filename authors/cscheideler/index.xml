<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian Scheideler | Joshua J. Daymude</title>
    <link>https://jdaymude.github.io/authors/cscheideler/</link>
      <atom:link href="https://jdaymude.github.io/authors/cscheideler/index.xml" rel="self" type="application/rss+xml" />
    <description>Christian Scheideler</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2023 Joshua J. Daymude</copyright><lastBuildDate>Fri, 17 Feb 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://jdaymude.github.io/authors/cscheideler/avatar_hu2e12bfcec5696882d7fc82f21c2c4035_314631_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Christian Scheideler</title>
      <link>https://jdaymude.github.io/authors/cscheideler/</link>
    </image>
    
    <item>
      <title>Self-Organizing Particle Systems (SOPS)</title>
      <link>https://jdaymude.github.io/project/sops/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/project/sops/</guid>
      <description>&lt;p&gt;Self-Organizing Particle Systems (SOPS) is an abstraction of &lt;em&gt;programmable matter&lt;/em&gt;, a substance with the ability to change its physical properties (shape, density, conductivity, etc.) in a programmable fashion. In order for programmable matter to live up to the dream of being an all-purpose &amp;quot;bucket of stuff&amp;quot; deployable for any task at any scale, we need a rich toolbox of algorithmic primitives upon which we can program more complex behaviors. Although the eventual vision is to control a whole mass of programmable matter as a single entity, our toolbox of primitives should be defined at the level of individual &amp;quot;atoms&amp;quot; of programmable matter to enable arbitrary scalability. Thus, we must take a distributed computing approach to defining micro-scale behaviors that collectively induce macro-scale phenomena.&lt;/p&gt;
&lt;p&gt;Towards this goal, self-organizing particle systems abstractly envision programmable matter as an ensemble of tiny computational units called &lt;em&gt;particles&lt;/em&gt;. These particles are assumed to be very simple: they have very limited memory, no sense of orientation or direction, and only local movement and communication capabilities. Our formal model for these particle systems is the &lt;em&gt;amoebot model&lt;/em&gt;, which provides a theoretical framework for developing and analyzing our distributed algorithms for particle systems.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Canonical Amoebot Model: Algorithms and Concurrency Control</title>
      <link>https://jdaymude.github.io/publication/daymude2023-canonicalamoebot/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2023-canonicalamoebot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Adaptive Self-Organization in Anonymous Dynamic Networks</title>
      <link>https://jdaymude.github.io/project/dynamic-networks/</link>
      <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/project/dynamic-networks/</guid>
      <description>&lt;p&gt;Distributed computing theory has matured well beyond its original inspiration of dedicated computers linked together in static networks for message passing and file sharing.
A key theme across modern applications of distributed computing is the impact of &lt;em&gt;dynamics&lt;/em&gt;, or frequent changes in the system&amp;rsquo;s members or the connections among them.
This paradigm shift has enabled distributed computing to innovate both within computer science—e.g., in the construction of self-stabilizing overlay networks—and beyond the realm of engineering in, e.g., economics, biology, neurology, and active matter physics.
Motivated by these domains where individuals often have limited to no explicit computational power, we study the &lt;em&gt;algorithmic theory of dynamic networks&lt;/em&gt; where nodes are &lt;em&gt;anonymous&lt;/em&gt; (lacking unique identifiers), have &lt;em&gt;sublogarithmic memory&lt;/em&gt; (insufficient for computing identifiers), and communicate via &lt;em&gt;message passing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We are specifically interested in &lt;em&gt;asynchronous concurrency&lt;/em&gt; and &lt;em&gt;adaptive self-organization&lt;/em&gt;.
In studying asynchronous concurrency, we challenge the literature&amp;rsquo;s ubiquitous simplifying assumption that computation and network dynamics remain separated in time, instead designing algorithms that achieve their desired goals in spite of concurrent topological changes.
With adaptive self-organization, we initiate the study of an orthogonal type of dynamics, &lt;em&gt;time-varying system tasks&lt;/em&gt;, which require algorithms to simultaneously adapt to the environment and achieve self-stabilization.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Local Mutual Exclusion for Dynamic, Anonymous, Bounded Memory Message Passing Systems</title>
      <link>https://jdaymude.github.io/publication/daymude2022-localmutual/</link>
      <pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2022-localmutual/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Canonical Amoebot Model: Algorithms and Concurrency Control</title>
      <link>https://jdaymude.github.io/publication/daymude2021-canonicalamoebot/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2021-canonicalamoebot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Convex Hull Formation for Programmable Matter</title>
      <link>https://jdaymude.github.io/publication/daymude2020-convexhull/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2020-convexhull/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Computing by Programmable Particles</title>
      <link>https://jdaymude.github.io/publication/daymude2019-computingparticles/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2019-computingparticles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improved Leader Election for Self-Organizing Programmable Matter</title>
      <link>https://jdaymude.github.io/publication/daymude2017-improvedleaderelection/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2017-improvedleaderelection/</guid>
      <description></description>
    </item>
    
    <item>
      <title>On the Runtime of Universal Coating for Programmable Matter</title>
      <link>https://jdaymude.github.io/publication/daymude2018-coatingruntime/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://jdaymude.github.io/publication/daymude2018-coatingruntime/</guid>
      <description>&lt;h3 id=&#34;related-press&#34;&gt;Related Press&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asunow.asu.edu/20170306-opening-paths-progress-programmable-materials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Opening Paths to Progress with Programmable Materials.&lt;/a&gt; Joe Kullman. &lt;em&gt;ASU Now&lt;/em&gt;, March 2017. (Also featured in &lt;a href=&#34;http://technews.acm.org/archives.cfm?fo=2017-03-mar/mar-13-2017.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;ACM TechNews&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
