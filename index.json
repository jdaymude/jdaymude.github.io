[{"authors":["Name \"aporter\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"0fd7b93c4b20a2bc451aca0c23c5397c","permalink":"https://jdaymude.github.io/authors/aporter/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/aporter/","section":"authors","summary":"","tags":null,"title":"Alexandra Porter","type":"authors"},{"authors":["Name \"aricha\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"0d27ba5293b91348555874c76c9c5016","permalink":"https://jdaymude.github.io/authors/aricha/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/aricha/","section":"authors","summary":"","tags":null,"title":"Andréa W. Richa","type":"authors"},{"authors":["Name \"bdutta\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"9fe1f2aa453c4dbcbe17c4b995a12795","permalink":"https://jdaymude.github.io/authors/bdutta/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/bdutta/","section":"authors","summary":"","tags":null,"title":"Bahnisikha Dutta","type":"authors"},{"authors":["Name \"cgokmen\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"6946d255df9e42ca748d21a18f48162a","permalink":"https://jdaymude.github.io/authors/cgokmen/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/cgokmen/","section":"authors","summary":"","tags":null,"title":"Cem Gökmen","type":"authors"},{"authors":["Name \"cscheideler\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"f5f73ed1c96551f4586103eca899444c","permalink":"https://jdaymude.github.io/authors/cscheideler/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/cscheideler/","section":"authors","summary":"","tags":null,"title":"Christian Scheideler","type":"authors"},{"authors":["Name \"dgoldman\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"eef09b2b1f018e8392be35c8b6355840","permalink":"https://jdaymude.github.io/authors/dgoldman/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/dgoldman/","section":"authors","summary":"","tags":null,"title":"Daniel I. Goldman","type":"authors"},{"authors":["Name \"drandall\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"5175bf62bd234d1a85df47eb43cb90ca","permalink":"https://jdaymude.github.io/authors/drandall/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/drandall/","section":"authors","summary":"","tags":null,"title":"Dana Randall","type":"authors"},{"authors":["Name \"edemaine\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"788a1851170cf1d2e0fd7a7a5c1e186d","permalink":"https://jdaymude.github.io/authors/edemaine/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/edemaine/","section":"authors","summary":"","tags":null,"title":"Erik D. Demaine","type":"authors"},{"authors":["Name \"ikostitsyna\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"50b35ec7ca405c3322256aa9ba085596","permalink":"https://jdaymude.github.io/authors/ikostitsyna/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/ikostitsyna/","section":"authors","summary":"","tags":null,"title":"Irina Kostitsyna","type":"authors"},{"authors":["Name \"jcalumbaugh\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"b0b39c394912a4dad46bd2abe40ecce0","permalink":"https://jdaymude.github.io/authors/jcalumbaugh/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/jcalumbaugh/","section":"authors","summary":"","tags":null,"title":"John Calvin Alumbaugh","type":"authors"},{"authors":["jdaymude"],"categories":null,"content":"I research algorithmic theory for the efficient control and coordination of emergent behavior in programmable matter systems. I leverage techniques from several disciplines, including distributed computing, stochastic processes, swarm intelligence, bio-inspired algorithms, and reinforcement learning. This site is my own and includes several non-academic pursuits; more information about our research group can be found on our Self-Organizing Particle Systems lab site.\nMy faith as a Christian shapes how I see the world and my place in it. I view my position as a researcher as a venue to ask questions that matter, to seek solutions that serve others\u0026rsquo; needs instead of exploiting their wants, and to foster environments of discourse that value reasoning and mutual respect above the weaponization of knowledge. I\u0026rsquo;m still learning what a holistic integration of science, faith, and human flourishing looks like, but in the meantime am happily committed to doing my PhD work in a spirit of integrity and generosity.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1584573903,"objectID":"c0a06a22bce3656483eafef6ab309aba","permalink":"https://jdaymude.github.io/authors/jdaymude/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/jdaymude/","section":"authors","summary":"I research algorithmic theory for the efficient control and coordination of emergent behavior in programmable matter systems. I leverage techniques from several disciplines, including distributed computing, stochastic processes, swarm intelligence, bio-inspired algorithms, and reinforcement learning. This site is my own and includes several non-academic pursuits; more information about our research group can be found on our Self-Organizing Particle Systems lab site.\nMy faith as a Christian shapes how I see the world and my place in it.","tags":null,"title":"Joshua J. Daymude","type":"authors"},{"authors":["Name \"khinnenthal\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"4aaced071c52143a48bbda56c7c016f1","permalink":"https://jdaymude.github.io/authors/khinnenthal/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/khinnenthal/","section":"authors","summary":"","tags":null,"title":"Kristian Hinnenthal","type":"authors"},{"authors":["Name \"mandresarroyo\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"7d2e5035baf71b36eeb49ab7e91c226b","permalink":"https://jdaymude.github.io/authors/mandresarroyo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/mandresarroyo/","section":"authors","summary":"","tags":null,"title":"Marta Andrés Arroyo","type":"authors"},{"authors":["Name \"mpatitz\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"bdd543d3d3885ba74b99facfd542365a","permalink":"https://jdaymude.github.io/authors/mpatitz/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/mpatitz/","section":"authors","summary":"","tags":null,"title":"Matthew J. Patitz","type":"authors"},{"authors":["Name \"rgmyr\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"4c0cd0af92955e6d7100c3c252ed14bf","permalink":"https://jdaymude.github.io/authors/rgmyr/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/rgmyr/","section":"authors","summary":"","tags":null,"title":"Robert Gmyr","type":"authors"},{"authors":["Name \"rwarkentin\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"b64b01e87f57268acc5b739419751188","permalink":"https://jdaymude.github.io/authors/rwarkentin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/rwarkentin/","section":"authors","summary":"","tags":null,"title":"Ross Warkentin","type":"authors"},{"authors":["Name \"scannon\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"7cf6e979d149597b5b03d16c8c6a4cb1","permalink":"https://jdaymude.github.io/authors/scannon/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/scannon/","section":"authors","summary":"","tags":null,"title":"Sarah Cannon","type":"authors"},{"authors":["Name \"sli\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"3c9deee7d9342268cecabded679f245e","permalink":"https://jdaymude.github.io/authors/sli/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sli/","section":"authors","summary":"","tags":null,"title":"Shengkai Li","type":"authors"},{"authors":["Name \"tstrothmann\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"d6a7ef04ec7b39ff53016a24cae19ff6","permalink":"https://jdaymude.github.io/authors/tstrothmann/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/tstrothmann/","section":"authors","summary":"","tags":null,"title":"Thim Strothmann","type":"authors"},{"authors":["Name \"wsavoie\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"028bf99c53d1a9fe6b5aa2cc8ed9e7a2","permalink":"https://jdaymude.github.io/authors/wsavoie/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/wsavoie/","section":"authors","summary":"","tags":null,"title":"William Savoie","type":"authors"},{"authors":["Name \"zderakhshandeh\""],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1585067711,"objectID":"f2b01843dc2c561aff82e0915f5c9345","permalink":"https://jdaymude.github.io/authors/zderakhshandeh/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/zderakhshandeh/","section":"authors","summary":"","tags":null,"title":"Zahra Derakhshandeh","type":"authors"},{"authors":null,"categories":["teaching"],"content":"Overview  CSE 598, Fall 2019, CIDSE, Arizona State University Instructor: Joshua J. Daymude Co-Instructor: Andréa W. Richa MW 4:35pm–5:50pm, BYENG 210  We study a cohesive and elegant theory for (1) counting the size of very large sets — e.g., the set of all matchings of a large graph — and (2) randomly sampling from such sets according to a desired distribution. The course is divided into three units: Markov chain fundamentals and approximate counting, analyzing Markov chain mixing times, and applications of MCMC methods.\nThe syllabus is available here (last updated 8/28/19, 7:41pm).\nMy lecture notes (last updated 11/16/19, 7:16pm) are fairly self-contained; Counting, Sampling, and Integrating: Algorithms and Complexity by Jerrum and Markov Chains and Mixing Times by Levin-Peres-Wilmer can be used as references.\nEvaluation Course: 4.54/5. Instructor: 4.81/5.\nSchedule  8/26/19: Course overview. Exact counting, part 1 of 3. 8/28/19: Exact counting, part 2 of 3. 9/2/19: Labor Day, classes excused. 9/4/19: Exact counting, part 3 of 3. 9/9/19: Approximate counting and almost-uniform sampling, part 1 of 2. 9/11/19: Approximate counting and almost-uniform sampling, part 2 of 2. 9/16/19: Introduction to Markov chains. 9/18/19: Example Markov chains, part 1 of 3. Lectures online, sign in with your @asu.edu email to access part 1 and part 2. 9/23/19: Example Markov chains, part 2 of 3. (The Metropolis process.) 9/25/19: Example Markov chains, part 3 of 3. (The Ising Model.) 9/30/19: Coupling, part 1 of 3. (The coupling lemma, random walks on the hypercube.) 10/2/19: Coupling, part 2 of 3. (Random walks on the hypercube, card shuffling, and graph coloring.) 10/7/19: Coupling, part 3 of 3. (Graph coloring.) 10/9/19: Path coupling, part 1 of 2. (Graph coloring.) 10/16/19: Review of Assignment 2. 10/21/19: Path coupling, part 2 of 2. (Graph coloring.) 10/23/19: Conductance, part 1 of 2. (Lazy random walks.) 10/28/19: Conductance, part 2 of 2. (Graph coloring.) Spectral gap methods, part 1 of 2. 10/30/19: Spectral gap methods, part 2 of 2. (Lazy random walks.) 11/4/19: Class canceled. 11/6/19: Canonical paths, part 1 of 2. (Lazy random walks.) 11/11/19: Veteran’s Day, classes excused. 11/13/19: Canonical paths, part 2 of 2 (Sampling weighted random matchings.) 11/18/19: MCMC methods for maximum likelihood estimation in phylogeny. 11/25/19–12/4/19: Project presentations.  Assignments  \rAssignment 1: Out August 26, Due September 4. \rAssignment 2: Out September 30, Due October 11. \rAssignment 3: Out November 6, Due November 27.  Project The project description can be found here. Project proposals are due October 18, while the project report and presentation slides are due November 22.\n","date":1556046360,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1585166320,"objectID":"92b528635862a3fb0395f16e02b4946e","permalink":"https://jdaymude.github.io/courses/2019fall-cse598-mcmc/","publishdate":"2019-04-23T12:06:00-07:00","relpermalink":"/courses/2019fall-cse598-mcmc/","section":"courses","summary":"Fall 2019, Arizona State University. Course evaluation: 4.54/5, instructor evaluation: 4.81/5.","tags":["markov-chains"],"title":"Markov Chains and Monte Carlo Methods","type":"docs"},{"authors":["Joshua J. Daymude"],"categories":["teaching","tutorial"],"content":"My sister-in-law surprised me with a Molecube for Christmas, which combines the logic of a Sudoku puzzle with the mechanics of a Rubik\u0026rsquo;s cube. Each ball on the Molecube is one of nine colors, and the goal is to reconfigure a shuffled Molecube so each of its faces has all nine colors on it.\n\r\rIt turns out that solving the Molecube is a wonderful exercise in what computer scientists call reduction, which involves transforming a problem we don\u0026rsquo;t know how to solve into one that we do, solving that version, and then translating the solution back into the original problem. In this post, I\u0026rsquo;ll give a reader-friendly primer on reduction, outline a reduction from the Molecube to the Rubik\u0026rsquo;s cube, and then wrap up by solving the Molecube with a standard Rubik\u0026rsquo;s cube algorithm.\nIf you\u0026rsquo;re interested in solving the Molecube yourself (and perhaps you\u0026rsquo;re here looking for hints), I\u0026rsquo;ve created a worksheet you can use and will point out when you should skip ahead in the post so as to avoid spoiling this delightful puzzle.\nReduction: There and Back Again Say we have a problem $A$ that we don\u0026rsquo;t know how to solve and another problem $B$ that we do know how to solve. Said another way, we have an \u0026ldquo;algorithm\u0026rdquo; that can answer any question asked in the form of problem $B$, but we have no such algorithm for problem $A$ questions. The whole idea of reduction is to:\n Take a problem $A$ question (which we don\u0026rsquo;t know how to answer) and \u0026ldquo;transform\u0026rdquo; it into a problem $B$ question (which we do know how to answer). Use the \u0026ldquo;algorithm\u0026rdquo; for problem $B$ questions to get an answer for our transformed problem $A$ question. Translate the algorithm\u0026rsquo;s answer back into the context of problem $A$.  That\u0026rsquo;s it. We use a known algorithm (for problem $B$) as our workhorse for a new and unknown problem (problem $A$), and out pop solutions for our unknown problem! This powerful technique underlies almost all of theoretical computer science, giving us a tool to relate difficult problems to one another (as opposed to treating every new problem as something totally unique). I recently heard a high-profile professor in Computer Science claim that reduction is one of only two truly new ideas our discipline has ever contributed to science (though she called this idea \u0026ldquo;hierarchy\u0026rdquo;, with the other idea being \u0026ldquo;abstraction\u0026rdquo;).\nA natural question to ask next would be if all problems can be tackled with reduction. Unfortunately, in practice, finding the right translation between a pair of problems (Step 1, above) can be prohibitively difficult. Reduction is easiest when the two problems seem to have an obvious relationship we can exploit, which brings us to the Molecube and the Rubik\u0026rsquo;s cube.\nA Sudoku-Like Transformation It\u0026rsquo;s difficult to overstate how much of the Molecube\u0026rsquo;s solution is given away in its advertising as \u0026ldquo;Sudoku + Rubik\u0026rsquo;s cube\u0026rdquo;. My solution will treat this equation quite literally, starting with a transformation that relies on a Sudoku puzzle. I found this transformation by asking two simple questions:\n How are the Molecube and the Rubik\u0026rsquo;s cube similar?   They\u0026rsquo;re both 3x3x3 cubes, meaning they both have 6 faces, 8 corners, and 12 edges. This totals 26 balls (on the Molecube) or blocks (on the Rubik\u0026rsquo;s cube). Their physical mechanics (spinning, twisting, etc.) are identical. Their goals are, in a way, also identical: from a shuffled configuration, reach a goal configuration.  How are the Molecube and the Rubik\u0026rsquo;s cube different?   Their goal configurations are different: the Molecube wants one ball of each color on each face, while the Rubik\u0026rsquo;s cube wants each face to be all the same color. There are nine colors on the Molecube, but only six on the Rubik\u0026rsquo;s cube. A block on the Rubik\u0026rsquo;s cube has 1–3 colors (one for each face it touches), while a ball on the Molecube is the same color on all \u0026ldquo;sides\u0026rdquo;.  The similarities hint at a solution: though the goal configurations are different, the cubes\u0026rsquo; structures and mechanics are the same. So if I find a goal configuration for the Molecube, I can use the Rubik\u0026rsquo;s cube algorithm to handle all the tricky rearranging involved in actually getting there.\nIf that\u0026rsquo;s enough of a framework for you to attempt your own solution, feel free to download the worksheet I\u0026rsquo;ve created to help you visualize the Molecube as a Sudoku puzzle (with colors instead of numbers). You\u0026rsquo;ll want to stop reading here and come back once you\u0026rsquo;ve completed a goal configuration or if you\u0026rsquo;re stuck and need hints.\nSpeaking of hints, the best way to unlock this tricky Sudoku-like color puzzle (getting one color on each face) is to study the Molecube\u0026rsquo;s colors and structure. I asked myself the following questions (which culminated in the table at the top of the worksheet):\n How does the Molecube fit nine colors on a cube with 26 balls? How are the colors distributed over the different types of balls (centers, corners, and edges)? Are there any patterns that appear when trying to place balls of a certain color so it appears on each face exactly once?  The answers to these questions are revealing. There are three balls of each color, with the important exception of Green, which only has two. Further, Green is the unique color that is on two corners. Red and Purple are each on three edges, and the remaining six colors (White, Black, Orange, Yellow, Light Blue, and Blue) are each on one center, one corner, and one edge. This information — after some careful thinking — reveals the patterns we need:\n As in the Rubik\u0026rsquo;s cube, centers opposite one another are always opposite one another (i.e., Black is always opposite White, Orange is always opposite Yellow, and Blue is always opposite Light Blue). The only way the two Green corners avoid being on the same face is if they\u0026rsquo;re opposite one another (e.g., upper-right-back and lower-left-front). The only way the three Red (or Purple) edges avoid being on the same face is if a Red (or Purple) appears exactly once in each \u0026ldquo;middle band\u0026rdquo; (shown below, left). So each middle band contains exactly one Red and one Purple. For any of the remaining colors, (e.g., Blue) there is a center of that color. This blocks the corner of that color from being in the same \u0026ldquo;layer\u0026rdquo;, so the corner must go in the layer opposite the center (shown below, right). Once the position of the corner is fixed, there is only one position the edge of that color can go.  Using these rules and some trial and error, I found the solution shown below, also detailed in the worksheet solution. (An interesting aside: I don\u0026rsquo;t know if this is the only solution, but any solution works for the reduction). To relate the Molecube solution to the Rubik\u0026rsquo;s cube solution, we simply treat each 3×3 face on the Molecube as a \u0026ldquo;color\u0026rdquo; on the Rubik\u0026rsquo;s cube. (For example, the Black ball at the top-left of the White-center face becomes the Red-White-Green block on the Rubik\u0026rsquo;s cube). This completes the transformation step of the reduction.\nRubik-ing the Molecube With the difficult transformation step out of the way, the rest of the reduction is easy. You can solve any shuffled Molecube just like you would a Rubik\u0026rsquo;s cube (assuming you know how to do that), but instead of aiming to have faces with all the same color, you aim to build the goal configuration we got from the transformation (above, left). To make this easier for me to visualize, I made a 3D rendering of my solution (front view on the left, back view on the right).\nI was pleasantly surprised at how much Rubik\u0026rsquo;s cube muscle memory I still had from speedcubing in junior high (though if you need a refresher, I found this tutorial helpful). Interestingly, some of the steps in the Rubik\u0026rsquo;s cube \u0026ldquo;algorithm\u0026rdquo; are unnecessary for the Molecube. Remember the earlier observation that the Molecube\u0026rsquo;s balls are each a single color while the Rubik\u0026rsquo;s cube blocks can have 1–3 colors each? This means that the Molecube doesn\u0026rsquo;t care if its balls are rotated \u0026ldquo;in place\u0026rdquo;, though this is a problem for the Rubik\u0026rsquo;s cube (see the example below). So any steps in the Rubik\u0026rsquo;s cube algorithm that are meant to fix things like this can be skipped entirely.\n\r\rBut Does It Work? To show that the reduction approach not only works but is also reasonably fast, here\u0026rsquo;s me solving the Molecube in just under 2 minutes.\n  \rThere are a lot of Rubik\u0026rsquo;s cube-inspired puzzles these days (for example, the Ghost Cube and the Pyraminx). But solving the Molecube by reduction makes me wonder just how many of these new puzzles share a similar relationship to the original Rubik\u0026rsquo;s cube. If these relationships exist, we\u0026rsquo;d find that these new puzzles aren\u0026rsquo;t really new at all; they\u0026rsquo;re just an old puzzle we know how to solve, but with new names and nice packaging.\n","date":1578340800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"10371ffd86fe132cdaa17347bb0c109a","permalink":"https://jdaymude.github.io/post/solving-the-molecube-by-reduction/","publishdate":"2020-01-06T13:00:00-07:00","relpermalink":"/post/solving-the-molecube-by-reduction/","section":"post","summary":"In this post, I give a reader-friendly primer on \"reduction\", a computer scientist's tool for relating problems to one another. I then solve the Molecube puzzle by reducing it to the Rubik's cube.","tags":["computer-science","mathematics","molecube","puzzle","reduction"],"title":"Solving the Molecube by Reduction","type":"post"},{"authors":["Joshua J. Daymude","Robert Gmyr","Kristian Hinnenthal","Irina Kostitsyna","Christian Scheideler","Andréa W. Richa"],"categories":["research"],"content":"","date":1578096000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585067711,"objectID":"7e98aaab6de2cb4a2f5d0c7d28763ad5","permalink":"https://jdaymude.github.io/publication/daymude2020-convexhull/","publishdate":"2020-01-04T00:00:00Z","relpermalink":"/publication/daymude2020-convexhull/","section":"publication","summary":"In this paper, we give an algorithm under the amoebot model for forming the convex hull of an object, enclosing it with the minimum number of particles. Ours is the first distributed algorithm for convex hull formation restricted to local sensing, constant-size memory, and no shared orientation or coordinates.","tags":["programmable-matter","convex-hull","binary-counter","distributed-algorithms","computational-geometry"],"title":"Convex Hull Formation for Programmable Matter","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":null,"content":"","date":1569070800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"51ee402e06587c07a7259779a8344479","permalink":"https://jdaymude.github.io/talk/2019random-separation/","publishdate":"2019-09-21T09:00:00-04:00","relpermalink":"/talk/2019random-separation/","section":"talk","summary":"In this talk, I present our stochastic algorithm for separation and integration in heterogeneous particle systems. I detail how our analysis techniques from compression break down in the heterogeneous setting and how we use new tools like the *cluster expansion* to address these obstacles.","tags":["programmable-matter","separation","markov-chains","distributed-algorithms","cluster-expansion"],"title":"A Local Stochastic Algorithm for Separation in Heterogeneous Self-Organizing Particle Systems","type":"talk"},{"authors":["Sarah Cannon","Joshua J. Daymude","Cem Gökmen","Dana Randall","Andréa W. Richa"],"categories":["research"],"content":"","date":1568937600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"21433a3f697af3e4faad490739286d49","permalink":"https://jdaymude.github.io/publication/cannon2019-separation/","publishdate":"2019-09-20T00:00:00Z","relpermalink":"/publication/cannon2019-separation/","section":"publication","summary":"In this paper, we extend the stochastic approach to *heterogeneous* self-organizing particle systems made up of particles of different color classes. We show that by biasing random particle movements based on the number of same-color neighbors, these systems can collectively separate or integrate.","tags":["programmable-matter","separation","markov-chains","distributed-algorithms","cluster-expansion"],"title":"A Local Stochastic Algorithm for Separation in Heterogeneous Self-Organizing Particle Systems","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["creative"],"content":"Mathematicians really care about correctness. We believe unspoken assumptions are dangerous. We think vague language is confusing, and saying more or less than we mean is grounds for misunderstanding. We want terms to be clearly defined, and for points to follow logically, like links in an unbreakable chain of truth. But sometimes people say things that are completely reasonable and yet we still feel the need to set them straight:\n\r\rThis is my first contribution to the world of webcomics, a medium I\u0026rsquo;ve long admired for being able to deliver witty, weird reflections on life in simple packages. Giving credit where it\u0026rsquo;s due, this \u0026ldquo;joke\u0026rdquo; is adapted from The Curious Case of the Dog in the Night-Time by Mark Haddon and the art style takes after poorlydrawnlines by Reza Farazmand. In living out generous making, this comic is available as a high resolution PNG or PDF for you to use as you\u0026rsquo;d like. (Just keep my authorship in the corner intact, please!)\nAnd hey, to the economists out there: if you\u0026rsquo;ve got any good roasts of mathematicians, I\u0026rsquo;m all ears.\n","date":1564503300,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"8f2171832576ff1fe35ffeac2d3935fb","permalink":"https://jdaymude.github.io/post/the-three-academics/","publishdate":"2019-07-30T09:15:00-07:00","relpermalink":"/post/the-three-academics/","section":"post","summary":"A webcomic about mathematicians, correctness, and cows.","tags":["academia","mathematics","webcomic"],"title":"The Three Academics: A Joke","type":"post"},{"authors":["John Calvin Alumbaugh","Joshua J. Daymude","Erik D. Demaine","Matthew J. Patitz","Andréa W. Richa"],"categories":["research"],"content":"","date":1563926400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585067711,"objectID":"4f27e10722e6b57662c21136bb6b2b1c","permalink":"https://jdaymude.github.io/publication/alumbaugh2019-tilesimulation/","publishdate":"2019-07-24T00:00:00Z","relpermalink":"/publication/alumbaugh2019-tilesimulation/","section":"publication","summary":"In this paper, we bridge the gap between self-organizing particle systems and tile self-assembly systems by providing a simulation of the *amoebot model* within the *tile automata model*.","tags":["programmable-matter","self-assembly","tile-automata","amoebot-model","simulation"],"title":"Simulation of Programmable Matter Systems Using Active Tile-Based Self-Assembly","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["software"],"content":"Health insurance is confusing. Last year, after Annie and I got married and she started a new job, she came home from orientation day with the book. The book of health insurance plans, complete with overcomplicated tables of costs and percentages, interspersed with pictures of smiling people. I assume they\u0026rsquo;re smiling either to make me — the daunted reader — feel assured, or because they know they\u0026rsquo;d be screwed in the U.S. without health insurance. But that\u0026rsquo;s another issue.\nChoices, Choices The problem with displaying a health insurance plan using many tables is that it\u0026rsquo;s very difficult to make comparisons between plans. One plan might be more costly than another in certain categories but not in others. One might have a low deductible while the other has a high co-pay. Yet a third plan might have a very middling premium and comes with a Flexible Savings Account. Even if I know what all these terms mean and how they interact with one another, it\u0026rsquo;s still hard to discern which would be best for our family\u0026rsquo;s specific health needs. And, to top it all off, I can\u0026rsquo;t know if I\u0026rsquo;m getting a good deal since insurance rates are negotiated between insurance companies and employers, and there\u0026rsquo;s very little info available online to compare with.\nThis, I think, is where uncertainty sets in and some word-of-mouth advice can end up replacing mathematical reasoning for some people. (Or, for those who grew up in the 2000s, maybe you have a vaguely negative feeling about HMOs because of Melman from Madagascar.) But Annie and I wanted grounded answers, so we went to our whiteboard, scribbled a ton of math and graphs, argued about said scribbles, eventually came to realize we agreed about everything we were arguing over (classic), and got to work.\n\r\rCutting Through the Jargon A big part of this for me was simply understanding what all these health insurance words meant. Here\u0026rsquo;s what I learned (feel free to skip if you know this already).\n A premium is a cost you pay every month just for being on insurance. Think of it like the cost of a Netflix subscription, but more expensive and way less entertaining. A deductible is a set amount of medical costs that you are 100% responsible for. Insurance is only going to kick in and make things cheaper after you \u0026ldquo;meet\u0026rdquo; your deductible. A copay (co-payment) is the percentage of medical costs you\u0026rsquo;re responsible for after your deductible is met. An out-of-pocket maximum is the maximum amount of money you will be responsible to pay in a year.  Let\u0026rsquo;s work this as an example. Say I have Plan A, shown below.\n    premium deductible copay out-of-pocket maximum     Plan A $200 $500 20% $4,000    Say my plan starts in January, and the first three months go by without any doctor appointments, prescription refills, etc. By the time March has ended, I\u0026rsquo;ve paid $\\$200 \\times 3 = \\$600$ in premiums. Then, in April, I get an infection and need to see my primary care physician. The doctor is charging me $\\$75$ for the visit, and the medication they prescribed is another $\\$75$. Because I haven\u0026rsquo;t met my deductible yet (premiums don\u0026rsquo;t count!), I have to pay the full $\\$150$. I\u0026rsquo;ll also, of course, have to pay my April premium of $\\$200$. (This whole healthcare thing is expensive, isn\u0026rsquo;t it?) Time goes on, and by October my family has paid $\\$500$ out-of-pocket. But crisis strikes: I get in a car accident and break several bones. I\u0026rsquo;m rushed to the hospital via ambulance, and have to spend several days in the hospital getting stabilized and getting casts set. Our bill comes out to be $\\$25000$. But because our copay has now kicked in, we\u0026rsquo;re only responsible for $20\\% \\times \\$25000 = \\$5000$, and we only have to pay $\\$3500$ of the bill before we hit our $\\$4000$ out-of-pocket maximum.\nWhew.\nA Piecewise Function I made many simplifications to the healthcare system in my example above, but a year on health insurance can roughly be split into three stages: paying 100% of costs until meeting the deductible, paying only the copay percentage of costs after the deductible, and paying 0% of costs after hitting the out-of-pocket maximum. If we were to plot this with the x-axis being the total medical costs without insurance and the y-axis being the out-of-pocket costs with insurance, we\u0026rsquo;d end up with something that looks like:\n\r\rOnce Annie and I saw this, we realized we could plot all of our plan options onto one graph and immediately be able to see what would cost us the most depending on the medical costs we incurred. We only needed to add in the annual premium costs to see a decent approximation of everything we\u0026rsquo;d spend on health insurance in a year with each plan.\nBuilding SureChoice I quickly threw together some MATLAB code to compute and plot the piecewise cost function for each of our possible plans. What we found cut straight through the sales language in our plans booklet and made everything quite concrete: the best plan for us had everything to do with the medical costs we would have. Here\u0026rsquo;s an example plot:\n\r\rEvery line in the plot shows how expensive that plan would be if we had the total annual medical costs shown on the x-axis. The HMO plan (blue), for example, is almost always the most expensive plan (except for the $\\$3000$–$\\$9000$ range, where it\u0026rsquo;s better than the HDHP plan). If we knew we were going to have over $\\$30000$ in costs, the HDHP plan is the best. If we were going to have under $\\$5000$ in costs, everything but the HMO plan is roughly the same. The EPO plan basically wins out in all other cost ranges. All in all, this kind of visualization helped us to make the most cost-effective choice for our expected medical expenses.\nI\u0026rsquo;ve recently cleaned up my code, ported it to Python, and put it up on GitHub for anyone to use (\u0026hellip;assuming you know how to run Python code). Hopefully it can help you like it helped us, and if you have the skills to turn this into something easier to use (a web app, etc.) go for it! We might not be able to change these confusing systems, but we can at least make them easier to navigate.\n","date":1561872060,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"836cc578ebe25355389c791010362225","permalink":"https://jdaymude.github.io/post/surechoice/","publishdate":"2019-06-29T22:21:00-07:00","relpermalink":"/post/surechoice/","section":"post","summary":"Health insurance is confusing. In this post, I introduce a mathematical method and code for comparing insurance plans in a simple, visually compelling way.","tags":["health-insurance","python"],"title":"SureChoice: Making Informed Insurance Decisions","type":"post"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1554321600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"1c216b9f96a427b517d0937af7d311ea","permalink":"https://jdaymude.github.io/talk/2019discretemath-stochastic/","publishdate":"2019-04-03T13:00:00-07:00","relpermalink":"/talk/2019discretemath-stochastic/","section":"talk","summary":"In this talk, I give an overview of the stochastic approach to self-organizing particle systems, including Markov chain design and analysis for the compression, shortcut bridging, and separation problems.","tags":["programmable-matter","compression","bridging","separation","bio-inspired","markov-chains","distributed-algorithms"],"title":"Stochastic Algorithms for Programmable Matter","type":"talk"},{"authors":["Joshua J. Daymude"],"categories":["tutorial"],"content":"Our team over at the SOPS Lab has been writing a lot of code lately as part of an ongoing effort to make our AmoebotSim simulator publicly available through an open source release. There\u0026rsquo;s a lot of diversity in coding/software engineering experience among our team members — from finishing a first course in C++ to completing several internships in big tech — so I\u0026rsquo;ve been spending some time thinking about how to make on-boarding easier, forming new students into conceptual thinkers and proficient programmers as quickly as possible. This tutorial on the basics of Git is meant to help with that.\nNecessary Disclaimers We have to get two things out of the way up front. First, this is not really the \u0026ldquo;accessible to anyone, technical or not\u0026rdquo; kind of post that I usually aim for. While it is meant to be simpler than the average Git tutorial, it\u0026rsquo;s still going to talk about software skills that are, by nature, technical. Speaking of other Git tutorials: yes, I do know how many Git tutorials already exist. Many of them are ones I\u0026rsquo;ve learned from and am inspired by. Some are far more complete, more specific, more polished, and even more craftsy than what I intend to do here. The point of this tutorial is to distill all that wonderful material into something that gets students (and other newcomers) acquainted with basic Git concepts and comfortable with a great Git client all in one sitting.\nAs a last bit of housekeeping, I\u0026rsquo;d like to credit Rachel M. Carmena, whose methodology I\u0026rsquo;m following quite closely.\nGit\u0026rsquo;s View of the World Git sees a software project loosely like this:\n\r\rBig picture: there\u0026rsquo;s the remote server that houses the full software project and all the changes that have been made to it so far, and then there\u0026rsquo;s your computer where you implement new features and code changes. Now, Git is usually used when writing software collaboratively, so while the above picture is all that you have to worry about, the real setting is more like this:\n\r\rHold Up, What\u0026rsquo;s Git? Git is just a piece of software that\u0026rsquo;s openly available for anyone to use. (Aside: it\u0026rsquo;s not a company or something that\u0026rsquo;s sold commercially, though this is often confusing because of companies/services like GitHub and GitLab). The problem Git is trying to solve, informally, is to support many people editing the same set of files concurrently while causing as few conflicts and headaches as possible. You might recognize that Google Docs and Dropbox try to solve a similar problem, but with a different strategy that makes them poorly suited for software development. Imagine for a moment that you were trying to use Google Docs for writing real code. Say you\u0026rsquo;ve been up all night working on a cool new feature, tracking down all its subtle and frustrating bugs, and now you want to compile and test it one last time to make sure it\u0026rsquo;s all good to go.\nBut right as you go to compile, your teammate gets in there and starts writing some other code, which naturally isn\u0026rsquo;t complete yet and doesn\u0026rsquo;t build! What do you do? Do you hit them up on Slack and ask them to stop coding while you test your feature? (If so, that essentially means only one person can be working at a time). Do you just keep trying to compile over and over until you get lucky and it builds? (If problems arise in testing, you won\u0026rsquo;t be sure if it\u0026rsquo;s your code that\u0026rsquo;s causing issues or someone else\u0026rsquo;s). This is nightmarish and no one does this. (I hope).\nGit is an example of distributed version control software, a type of software meant to make these kinds of situations much easier to handle by giving each user more control over their own version of the files and when to incorporate the changes made by other people. (For the record, there are other choices for distributed version control, but Git is by far the most popular).\nTools of the Trade In Git, the remote repository contains the current version of the shared code. Remote repositories can be set up on any server (or even your own workstation), but most people prefer to use a service like GitHub, Bitbucket, or GitLab to host their projects for them, which makes life easier. Think of it like this: GitHub is to Git repositories as WordPress is to websites. You can certainly host your own website, but using a service like WordPress saves you the trouble of maintaining a web server yourself. Our team uses Bitbucket for our AmoebotSim project, so that\u0026rsquo;s what\u0026rsquo;ll be in the screenshots.\nAn additional way to simplify using Git is to get a nice Git client like GitKraken or GitHub Desktop instead of interfacing with Git on the command line (which many hardcore users will tell you is the only way to really learn Git). Using the website analogy again, Git clients are to Git repositories like themes and rich-text editors are to websites. Could you put a stellar website together writing your own HTML, CSS, and JavaScript? Sure. Would you learn a lot more about how websites work doing it this way? Of course. But it takes a lot longer, and there\u0026rsquo;s much more room to make mistakes. In general, Git clients make understanding your repository a breeze with nice graphical representations and controls. I\u0026rsquo;ll be using GitKraken here, and I highly recommend you do too!\nCloning a Repository Getting a copy of a repository from a remote server onto your machine is called cloning a repository.\n\r\rCloning makes a copy of the remote repository to your local repository. This not only includes the most recent version of the files but also the entire version history (list of changes) for every file, who made those changes, when those changes were made, and all the different branches of those files that your collaborators may be working on (we\u0026rsquo;ll come back to branching in a future post). The clone operation also puts the most recent version of the files in your working directory, where you can open them up in your file system and start making changes.\nThis is pretty easy to do with GitKraken:\n\r\r\rThese GIFs are supposed to animate, but this is currently an open issue with Hugo. I\u0026rsquo;ll update this when the issue is fixed.\r\r\rAnd it\u0026rsquo;s even easier if you\u0026rsquo;ve already signed into your hosting platform (e.g., Bitbucket) in GitKraken:\n\r\rMaking and Submitting Changes Now that the code is in my working directory, I can make my edits. From Git\u0026rsquo;s perspective, changes can either be tracked, meaning Git knows about them, or untracked, meaning the changes are in new files that haven\u0026rsquo;t been added to Git yet. Either way, I can add all the changes I\u0026rsquo;ve made to Git\u0026rsquo;s staging area in a process called staging:\n\r\rTo illustrate this, I\u0026rsquo;ll be adding license and copyright information to AmoebotSim (a very important part of going open source). I\u0026rsquo;ll be making these edits in three parts: (1) adding a LICENSE file, (2) adding a copyright notice to our main.cpp file, and (3) adding an abbreviated copyright notice to the other source files. Adding the LICENSE file will initially be an untracked change (it\u0026rsquo;s a new file), while the other changes that edit existing files will be tracked.\n\r\rNow that the changes are staged, we can commit them to our local repository. A commit is essentially a batch of changes with a description known as a commit message. In general, a commit message should clearly and concisely describe the changes its commit contains (see this post for best practices). Once that message is done, we can commit, adding our changes to the version history.\n\r\rThis is, per usual, easy to do and visualize in GitKraken:\n\r\rBut committing only puts our changes in the local repository (shown by the little computer icon in GitKraken), not the remote repository where everyone else can see them (shown by the profile picture of the repository owner). Updating the remote repository with new commits from our local repository is called pushing.\n\r\r\r\rOnce commits have been pushed, they\u0026rsquo;re out there for other repository members to see and use. Be sure that your code builds and is bug-free before you commit and push; otherwise, you\u0026rsquo;ll break everyone else\u0026rsquo;s builds and get a lot of angry messages asking you to fix your issues quickly! (There are ways to mitigate these kinds of problems, like branch/fork-based workflows with approval processes, but I\u0026rsquo;m saving those more advanced topics for a future post).\nGetting Other People\u0026rsquo;s Changes Say that you were offline for a couple hours (or days…) and are just returning to your project. Your teammates may have committed and pushed code while you were away, and you want to get all their changes. Git gives you two ways to do this: fetch and pull.\nFetching retrieves all the new updates (commits, files, etc.) from the remote repository and copies them to your local repository. These new updates exist separately from the rest of your work, allowing you to look into them independently from any changes you\u0026rsquo;ve made locally. If you want your team\u0026rsquo;s updates to be integrated with your local changes, you\u0026rsquo;ll need to merge them in.\n\r\rThis can potentially cause merge conflicts if both you and your teammates\u0026rsquo; commits changed the same lines of code. (Although, to be honest, Git can get confused and think all kinds of things are \u0026ldquo;conflicts\u0026rdquo; even when they\u0026rsquo;re not, so watch out for that). Thankfully, GitKraken has a slick tool for helping you fix your merge conflicts (this was, by far, the #1 reason our team recently switched to GitKraken from Sourcetree):\n  \rPulling simply combines fetching and merging into one step. It retrieves all the new updates from the remote repository and automatically tries to merge them into your local repository, possibly triggering merge conflicts for you to resolve along the way.\n\r\rIn GitKraken, both fetching and pulling can be performed using the top toolbar. The following example shows a pull, though you can see for a brief moment how it first fetches the new commit before merging it in.\n\r\rGit Out There I\u0026rsquo;ve covered the rudimentary operations of Git and how to do them in GitKraken, but there\u0026rsquo;s much more to learn! In a future post I hope to cover branch/fork-based workflows, pull requests, and rebasing, all of which can play a role in using Git for larger projects.\nAs always, I welcome your feedback and questions. Happy coding!\n","date":1548186000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"ae456160563c16b6a73956c6748f2cdd","permalink":"https://jdaymude.github.io/post/git-going-with-gitkraken/","publishdate":"2019-01-22T12:40:00-07:00","relpermalink":"/post/git-going-with-gitkraken/","section":"post","summary":"This post is a beginner's guide to Git, focusing on a solid conceptual framework for understanding version control and a hands-on experience using a visual Git client. I cover Git's purpose and infrastructure as well as cloning, committing, pushing, fetching, merging, and pulling.","tags":["git","gitkraken","programming"],"title":"Git Going With GitKraken","type":"post"},{"authors":["Joshua J. Daymude","Kristian Hinnenthal","Andréa W. Richa","Christian Scheideler"],"categories":["research"],"content":"","date":1547337600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"8ef7ac6e4e361e1df4208e85cd9ce71d","permalink":"https://jdaymude.github.io/publication/daymude2019-computingparticles/","publishdate":"2019-01-13T00:00:00Z","relpermalink":"/publication/daymude2019-computingparticles/","section":"publication","summary":"In this book chapter, we recap the first five years of work on the amoebot model and its variant, hybrid programmable matter. This includes distributed algorithms for shape formation and recognition, object coating, compression, shortcut bridging, separation, and some underlying primitives.","tags":["programmable-matter","leader-election","binary-counter","shape-formation","shape-recognition","coating","compression","bridging","separation","markov-chains","distributed-algorithms"],"title":"Computing by Programmable Particles","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["creative"],"content":"As a PhD student, I get to travel quite a bit. In just the last two years, I\u0026rsquo;ve been to Atlanta (a few times, once as a visiting researcher to GaTech for 3 months), Austin, Vienna, Dagstuhl, and — most recently — Tokyo. I get to meet interesting researchers on every trip, whether it be during a conference coffee break (where \u0026ldquo;meeting\u0026rdquo; people occasionally feels like getting interrogated about research) or by running into each other while meandering through a national park.\n  \rThese trips are largely work. I listen to talks on the latest research and imagine ways to connect them to my own. I introduce myself to more senior researchers (usually hesitantly) in the hopes that they\u0026rsquo;ll remember who I am once they\u0026rsquo;re through answering my questions. I stay up way too late the night before my talk polishing my slides to (what I hope is) perfection. I scribble all over whiteboards, drawing (mostly) intelligible pictures when working out new ideas with collaborators.\n\rNeed to update \u0026ldquo;slides\u0026rdquo; with a link to the talk I gave at WSSR.\r\r\rBut then there\u0026rsquo;s the beauty of getting to go to new places because I have to. As an introvert and someone who\u0026rsquo;s pretty happy being in one place, travel is definitely not an itch I need to scratch (to me, \u0026ldquo;wanderlust\u0026rdquo; often feels like a made up word fellow Millennials use to describe the need for jealousy-inducing Instagram content). But my PhD has helped me learn that there\u0026rsquo;s a lot out there to see and understand, and somehow the difference and uncertainty and novelty of it all makes me feel hope.\nSo, until we meet again, Tokyo.\n","date":1545419700,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"1e7cb9dd442c8c77bf8d7a74725ef852","permalink":"https://jdaymude.github.io/post/oh-the-places-youll-go/","publishdate":"2018-12-21T12:15:00-07:00","relpermalink":"/post/oh-the-places-youll-go/","section":"post","summary":"I get to travel quite a lot as a PhD student. This video shows the highlights of my first trip to Tokyo.","tags":["tokyo","travel","videography"],"title":"Oh, the Places You'll Go","type":"post"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1541314800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"1f9c8b540a69b114b84075f5e29f226c","permalink":"https://jdaymude.github.io/talk/2018wssr-sops/","publishdate":"2018-11-04T16:00:00+09:00","relpermalink":"/talk/2018wssr-sops/","section":"talk","summary":"In this talk, I give a comprehensive overview of the amoebot model for programmable matter, dividing algorithms and applications into three main categories: deterministic/stateful algorithms, fully stochastic algorithms, and applications to swarm robotics.","tags":["programmable-matter","leader-election","shape-formation","coating","compression","bridging","separation","smarticles","locomotion","phototaxing","swarm-robotics","markov-chains","distributed-algorithms"],"title":"Self-Organizing Particle Systems: an Algorithmic Approach to Programmable Matter","type":"talk"},{"authors":["Marta Andrés Arroyo","Sarah Cannon","Joshua J. Daymude","Dana Randall","Andréa W. Richa"],"categories":["research"],"content":"","date":1538092800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"e182c1540bd0421d0f52a07b46a41666","permalink":"https://jdaymude.github.io/publication/andresarroyo2018-bridging/","publishdate":"2018-09-28T00:00:00Z","relpermalink":"/publication/andresarroyo2018-bridging/","section":"publication","summary":"In this paper, we extend the stochastic approach to self-organizing particle systems used in compression to *shortcut bridging*, in which particles self-assemble bridges over gaps that balance a tradeoff between bridge length and cost. This work is inspired by the bridging behavior of *Eciton* army ants, and demonstrates how local interactions can guide a system to globally optimal configurations.","tags":["programmable-matter","bio-inspired","bridging","markov-chains","distributed-algorithms"],"title":"A Stochastic Approach to Shortcut Bridging in Programmable Matter","type":"publication"},{"authors":["William Savoie","Sarah Cannon","Joshua J. Daymude","Ross Warkentin","Shengkai Li","Andréa W. Richa","Dana Randall","Daniel I. Goldman"],"categories":["research"],"content":"","date":1537833600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"1fd36900e4f6728d251fbfdbf909f645","permalink":"https://jdaymude.github.io/publication/savoie2018-supersmarticles/","publishdate":"2018-09-25T00:00:00Z","relpermalink":"/publication/savoie2018-supersmarticles/","section":"publication","summary":"In this paper, we study the ensemble behavior of *smarticles*, smart active particles that are incapable of moving alone, but collectively can push against one another. We show that by introducing asymmetries among smarticles' behaviors, their chaotic interactions can yield directed motion.","tags":["programmable-matter","swarm-robotics","active-matter","locomotion","phototaxing","compression","smarticles"],"title":"Phototactic Supersmarticles","type":"publication"},{"authors":["Sarah Cannon","Joshua J. Daymude","Cem Gökmen","Dana Randall","Andréa W. Richa"],"categories":["research"],"content":"","date":1532304000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"1d84577dc4f98d9c484c8fa4fdd2a59b","permalink":"https://jdaymude.github.io/publication/cannon2018-separationba/","publishdate":"2018-07-23T00:00:00Z","relpermalink":"/publication/cannon2018-separationba/","section":"publication","summary":"In this brief announcement, we extend the stochastic approach to *heterogeneous* self-organizing particle systems made up of particles of different color classes. We show that by biasing random particle movements based on the number of same-color neighbors, these systems can collectively separate or integrate.","tags":["programmable-matter","separation","markov-chains","distributed-algorithms"],"title":"Brief Announcement: A Local Stochastic Algorithm for Separation in Heterogeneous Self-Organizing Particle Systems","type":"publication"},{"authors":["Joshua J. Daymude","Robert Gmyr","Andréa W. Richa","Christian Scheideler","Thim Strothmann"],"categories":["research"],"content":"","date":1514678400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585067711,"objectID":"a69bfb1bd2534ed935dc4fcff69a0ed4","permalink":"https://jdaymude.github.io/publication/daymude2017-improvedleaderelection/","publishdate":"2017-12-31T00:00:00Z","relpermalink":"/publication/daymude2017-improvedleaderelection/","section":"publication","summary":"In this paper, we present a randomized algorithm for leader election in the amoebot model. It is the first of its kind with rigorous correctness and runtime guarantees, and can tolerate holes in the system.","tags":["programmable-matter","leader-election","distributed-algorithms"],"title":"Improved Leader Election for Self-Organizing Programmable Matter","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"My first journal paper was published early last week, marking a milestone in the winding forest path that is my PhD. The paper has some nice ideas and results I\u0026rsquo;m proud of, but — regrettably — the writing style and level of mathematical rigor needed for publication can make it pretty hard to decipher for anyone not familiar with our niche of computer science. I\u0026rsquo;m of the opinion that ideas are only useful if people can understand them, so to that end I\u0026rsquo;m going to explain this paper in a way that\u0026rsquo;s a bit less formal and academic. With a little effort, I think we\u0026rsquo;ll both learn something new here. (And if it\u0026rsquo;s still all Greek to you, I\u0026rsquo;ll happily answer questions you leave in the comments).\nThe Nickel Version (TL;DR) The paper (whose title is mathy and unimportant) is all about programming futuristic, sci-fi materials that don\u0026rsquo;t exist yet to coat other objects in even layers as (relatively) fast as possible.\nThe, Uh, Dollar(?) Version Let\u0026rsquo;s take a look at the paper\u0026rsquo;s title (emphasis added): \u0026ldquo;On the Runtime of Universal Coating for Programmable Matter.\u0026rdquo;\nRuntime is a word we use to talk about how fast an algorithm is. As in many other aspects of life, faster is better and more efficient. So this paper is about how fast \u0026ldquo;Universal Coating for Programmable Matter\u0026rdquo; is.\n\r\rProgrammable matter broadly describes any kind of physical material that can change itself as a reaction to what\u0026rsquo;s around it without human interaction. It\u0026rsquo;s a bit sci-fi, but imagine a future in which roads fill their own potholes and cracks after wear and tear, clothes heal themselves from fraying and holes, or artificial cells isolate and neutralize malignant tumors in the human body. It sounds crazy and is definitely out there, but that\u0026rsquo;s what we\u0026rsquo;re talking about here.\n\r\rUniversal Coating is the action we\u0026rsquo;re trying to do. In this context, we mean \u0026ldquo;coating\u0026rdquo; like a coat of paint; we want to cover something as evenly as possible. (Nobody likes a lumpy paint job). \u0026ldquo;Universal,\u0026rdquo; as a math word, means that a technique works in many/all cases. Here, we\u0026rsquo;re talking about a single approach to coating that works no matter what the object to be coated looks like. (Which is pretty cool).\n\r\rSo, all together, this paper is about analyzing the speed of a particular approach to using futuristic materials for coating any kind of object in nice, even layers. (Ok, so even the one sentence wrap up is a mouthful). Also, a big thank you to Annie Carson for the great illustrations!\nSo How Does It Work? I\u0026rsquo;m really glad you asked. Actually, I\u0026rsquo;m really glad you\u0026rsquo;re still here after that heavy appetizer of an overview; hopefully it didn\u0026rsquo;t spoil your appetite before our main course, which starts right now! Take a look at a simulation of the Universal Coating algorithm over on our lab site, and keep it open for the rest of this section so you can refer back to it.\nWe need a bit of terminology before I explain what\u0026rsquo;s going on with all those dots and colors. There are two main \u0026ldquo;things\u0026rdquo; in this algorithm. Thing 1 is the object, which is the cluster of dots with black circles in the middle. We\u0026rsquo;re keeping things nice and simple in this example by making the object a hexagon, but it can be essentially any shape you want (\u0026ldquo;universal\u0026rdquo;, remember?). Thing 2 is the particle system, which are all the other dots that move around and change color. \u0026ldquo;Particle system\u0026rdquo; is just the term we use for the programmable matter stuff we talked about before: we\u0026rsquo;re trying to coat the object with these particles.\nIn really broad strokes, the algorithm can be broken down into four major steps:\n Get all the particles oriented towards the object using something like follow-the-leader. In the simulation video (0:00–0:02), this is when they all turn yellow. If you start at any yellow particle and follow its pointer to the next particle and so on, you\u0026rsquo;ll always end up at the object. Coat the object\u0026rsquo;s first layer. This happens insanely fast in the video (0:01–0:02) but there are actually a couple particles that turn red and fill in the few positions on the object\u0026rsquo;s first layer that weren\u0026rsquo;t already filled. You can see them if you pause the video and drag the slider back and forth around 0:01. Decide on a position to be the start/end of each layer. Choosing this marker position plays a big role in helping the particles learn when one layer is finished so they can start forming the next one. In the video (0:02–0:07), this decision process is shown with the line segments around the object changing colors. At 0:07, the particle occupying the marker position turns a light grey color. Coat the object in more layers one by one until all particles have been used. The video (0:08–0:20) shows this quite clearly, with finished particles turning green. The grey line of particles growing from the object towards the bottom are the particles from Step 3 which mark the start/end of each layer.  And that\u0026rsquo;s it! Perhaps as a point of pride, I have to mention that — although simple to describe — this algorithm is really involved. One of the main difficulties is that each particle runs this algorithm individually, so instead of Steps 1–4 happening nice and sequentially, they can actually all happen at once. And… yeah, it\u0026rsquo;s as chaotic as it sounds. The good news is that, in a previous paper, our group proved this algorithm always works, no matter what. Going forward, we\u0026rsquo;ll just take the fact that it works for granted.\n(Quick) Get Your Coat! I can\u0026rsquo;t remember how many times I got in the car to go somewhere as a kid only to be sent back inside to get a jacket. Mom never said the \u0026ldquo;quick\u0026rdquo; part, but it was definitely implied!\nWe\u0026rsquo;re going to shift our discussion to the real work of this new paper: proving that our Universal Coating algorithm runs reasonably fast. Let\u0026rsquo;s start with a motivating example for why you might do this kind of analysis:\nPretend there\u0026rsquo;s a secret technique for earning $1,000,000. Maybe it even comes with a guarantee that it will always work. We might get excited about something like that, or at least want to know more. But what if we found out that no one knew how long it would take to work? Or even worse, what if the fine print said it would take more days than the number of atoms in the universe? Well. We might still be waiting for our payout long after inflation turns a million dollars into pocket change, the cows come home, and the sun expands to consume the earth.\nThe lesson to be learned here: we need to know both that an algorithm works and that it won\u0026rsquo;t take a ridiculously long time. So how do we analyze the algorithm\u0026rsquo;s runtime? There\u0026rsquo;s often more than one way to crack that coconut, but the techniques can get pretty involved. Even getting a mastery over the most fundamental techniques can take the larger part of most undergraduate Computer Science (CS) programs. (Fun fact: this side of CS doesn\u0026rsquo;t even have to involve programming, contrary to the popular belief that CS people are a bunch of tech support code monkeys. Yes, I probably can fix your iPhone. No, I didn\u0026rsquo;t learn that in school.)\nTo explain both why analyzing our particular algorithm was nasty and how we ended up doing it, I\u0026rsquo;ll use a quick allegory. Imagine a race between two teams: Team Red and Team Blue. Team Red works like a machine: everyone comes to practice and trains hard, they perform well in events, and — most importantly — they run in perfect lock step, starting together and finishing together. Team Blue, on the other hand, is more about the individual effort. They also perform well in events, but have a mix of sprinters, endurance runners, runners who like to stop and smell the roses, and so on. Some of Team Blue\u0026rsquo;s runners end up finishing really fast, while others take longer.\nOur particle systems are, essentially, Team Blue. We don\u0026rsquo;t make any assumptions about how fast each particle works relative to the others, and it\u0026rsquo;s entirely possible that a particle can suddenly go faster or slower than usual without following a pattern. This makes it hard to figure out when the last Blue runner (or particle) will cross the finish line. So, instead of directly analyzing our system (Team Blue), we proved two things:\n Team Red — a simpler version of our particle systems where everyone progresses through the algorithm at the same rate — runs \u0026ldquo;fast\u0026rdquo;. Team Blue (our particle system) always runs faster than Team Red.  Therefore, as a nice logical result, Team Blue also runs \u0026ldquo;fast\u0026rdquo;. In fact, it\u0026rsquo;s entirely possible it even runs really fast!\nGood Job Out There, Get Some Water As a recap, we have an algorithm for programmable matter which coats objects of all shapes and sizes. We showed that this algorithm always works in an older paper, and that it runs pretty fast in this new journal paper. This runtime analysis boiled down to showing that a simplified version of our particle system runs the algorithm quickly, and that the real particle system always runs it even faster. (For my CS people out there, we showed that the Universal Coating algorithm runs in $\\mathcal{O}(n)$ asynchronous rounds with high probability, where $n$ is the number of particles in the system).\nThanks for reading, and feel free to comment with your thoughts, ideas, and questions!\n","date":1513008300,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"77b1a3f48056f7a2520182d3c8074eb6","permalink":"https://jdaymude.github.io/post/on-your-marks-get-set-coat/","publishdate":"2017-12-11T09:05:00-07:00","relpermalink":"/post/on-your-marks-get-set-coat/","section":"post","summary":"In this post, I break down some key ideas from my new journal paper \"On the Runtime of Universal Coating for Programmable Matter\". TL;DR: the paper is all about programming materials that don't exist yet to coat other objects in even layers as (relatively) fast as possible.","tags":["programmable-matter","coating","dominance-argument"],"title":"On Your Marks, Get Set, Coat!","type":"post"},{"authors":["Joshua J. Daymude","Zahra Derakhshandeh","Robert Gmyr","Alexandra Porter","Andréa W. Richa","Christian Scheideler","Thim Strothmann"],"categories":["research"],"content":"","date":1511827200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585067711,"objectID":"4909e2ce612b06a164078e174d2c3cc7","permalink":"https://jdaymude.github.io/publication/daymude2018-coatingruntime/","publishdate":"2017-11-28T00:00:00Z","relpermalink":"/publication/daymude2018-coatingruntime/","section":"publication","summary":"In this sequel paper on the *universal coating* problem, we analyze the runtime of an algorithm for self-organizing particle systems that coats 2D objects as evenly as possible. We show this algorithm terminates in a linear number of rounds with high probability, and is competitively optimal.","tags":["programmable-matter","coating","distributed-algorithms"],"title":"On the Runtime of Universal Coating for Programmable Matter","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"Image of Eciton army ants forming a shortcut bridge is reproduced with permission from Reid et al. (PNAS, 2015).\n","date":1507312800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"9068fcd96867a2347f1b87c66592d2f7","permalink":"https://jdaymude.github.io/talk/2017acoseminar-bridging/","publishdate":"2017-10-06T13:00:00-05:00","relpermalink":"/talk/2017acoseminar-bridging/","section":"talk","summary":"In this talk, I present a deep dive of our stochastic algorithm for shortcut bridging based on the bridging behavior of *Eciton* army ants.","tags":["programmable-matter","bio-inspired","bridging","markov-chains","distributed-algorithms"],"title":"A Stochastic Approach to Shortcut Bridging in Programmable Matter","type":"talk"},{"authors":["Marta Andrés Arroyo","Sarah Cannon","Joshua J. Daymude","Dana Randall","Andréa W. Richa"],"categories":["research"],"content":"Image of Eciton army ants forming a shortcut bridge is reproduced with permission from Reid et al. (PNAS, 2015).\n","date":1503532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"7332e23a64a23c07f4d87d46f7ca6655","permalink":"https://jdaymude.github.io/publication/andresarroyo2017-bridging/","publishdate":"2017-08-24T00:00:00Z","relpermalink":"/publication/andresarroyo2017-bridging/","section":"publication","summary":"In this paper, we extend the stochastic approach to self-organizing particle systems used in compression to *shortcut bridging*, in which particles self-assemble bridges over gaps that balance a tradeoff between bridge length and cost. This work is inspired by the bridging behavior of *Eciton* army ants, and demonstrates how local interactions can guide a system to globally optimal configurations.","tags":["programmable-matter","bio-inspired","bridging","markov-chains","distributed-algorithms"],"title":"A Stochastic Approach to Shortcut Bridging in Programmable Matter","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1501268700,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"c22b95880f3636aa3cdb45d3f756f0c3","permalink":"https://jdaymude.github.io/talk/2017bda-compression/","publishdate":"2017-07-28T14:05:00-05:00","relpermalink":"/talk/2017bda-compression/","section":"talk","summary":"In this talk, I present algorithms for compression and shortcut bridging designed using the stochastic approach to self-organizing particle systems.","tags":["programmable-matter","bio-inspired","compression","bridging","markov-chains","distributed-algorithms"],"title":"Local Stochastic Algorithms for Compression and Shortcut Bridging in Programmable Matter","type":"talk"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1501267200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585061451,"objectID":"4fbab459e6cbeeff70b9a490ce9986ee","permalink":"https://jdaymude.github.io/talk/2017bda-convexhull/","publishdate":"2017-07-28T13:40:00-05:00","relpermalink":"/talk/2017bda-convexhull/","section":"talk","summary":"In this talk, I present preliminary work on an algorithm for self-organizing convex hull formation, including an general outline of runtime analysis.","tags":["programmable-matter","convex-hull","distributed-algorithms","computational-geometry"],"title":"Convex Hull Formation for Programmable Matter","type":"talk"},{"authors":["Andréa W. Richa","Dana Randall","Daniel I. Goldman","Sarah Cannon","Joshua J. Daymude","Shengkai Li","Bahnisikha Dutta","William Savoie","Ross Warkentin","Cem Gökmen","Marta Andrés Arroyo"],"categories":["research"],"content":"We develop a theoretical framework for task-oriented active matter that combines distributed computing, stochastic processes, statistical physics, active matter physics, and robophysics. By harnessing phase changes from statistical physics in our formal modeling and algorithm design, we obtain robust and provable self-organizing behaviors. We then incorporate this theory into swarm robotics platforms, establishing tight analogies between (but not necessarily strict implementations of) the algorithms\u0026rsquo; rules and our robots\u0026rsquo; designs. This allows us to critically examine our theoretical algorithms\u0026rsquo; robustness to the errors and uncertainties of physical environments. Further, we can treat robot swarms as macro-scale active matter systems, studying the inter-robot dynamics as an analogy to particle interactions.\n","date":1469404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"77844b041c3ad13a6f0fb1bc3798f267","permalink":"https://jdaymude.github.io/project/active-matter/","publishdate":"2016-07-25T00:00:00Z","relpermalink":"/project/active-matter/","section":"project","summary":"Harnessing phase changes from statistical physics in algorithm design. Incorporating algorithmic theory in robot design and manufacturing. Making analogies between macro-scale robot swarm dynamics and active matter systems.","tags":["programmable-matter","swarm-robotics","active-matter","markov-chains","distributed-algorithms"],"title":"A Distributed, Stochastic Framework for Active Matter","type":"project"},{"authors":["Sarah Cannon","Joshua J. Daymude","Dana Randall","Andréa W. Richa"],"categories":["research"],"content":"","date":1469404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"e52152a46ec669c6b6998991bb93cae9","permalink":"https://jdaymude.github.io/publication/cannon2016-compression/","publishdate":"2016-07-25T00:00:00Z","relpermalink":"/publication/cannon2016-compression/","section":"publication","summary":"In this paper, we introduce the stochastic approach to self-organizing particle systems in which we use a Markov chain to describe how the system evolves over time as particles move randomly. We show that by biasing particle moves towards positions where they have more neighbors, the system converges to compressed states; we also show that when this bias is not strong enough, the system converges to expanded states.","tags":["programmable-matter","compression","markov-chains","distributed-algorithms"],"title":"A Markov Chain Algorithm for Compression in Self-Organizing Particle Systems","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1464652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"fc6454f56c1b193e1ab33544a1d21b29","permalink":"https://jdaymude.github.io/publication/daymude2016-undergradthesis/","publishdate":"2016-05-31T00:00:00Z","relpermalink":"/publication/daymude2016-undergradthesis/","section":"publication","summary":"This undergraduate honors thesis treats the problem of compression in self-organizing particle systems, where the goal is to gather particles as tightly together as possible. Three algorithms are proposed and compared with rigorous proofs and simulations.","tags":["programmable-matter","compression","markov-chains","distributed-algorithms"],"title":"Compression in Self-Organizing Particle Systems","type":"publication"},{"authors":["Joshua J. Daymude"],"categories":["research"],"content":"","date":1459965600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"57945b5ec456815db0cbbd7e0a5157a5","permalink":"https://jdaymude.github.io/talk/2016barrett-thesis/","publishdate":"2016-04-06T11:00:00-07:00","relpermalink":"/talk/2016barrett-thesis/","section":"talk","summary":"In this undergraduate thesis defense, I give three algorithms for compression in the amoebot model: local compression, hole elimination, and $\\alpha$-compression. Formal analysis and simulations are presented.","tags":["programmable-matter","compression","markov-chains","distributed-algorithms"],"title":"Compression in Self-Organizing Particle Systems","type":"talk"},{"authors":["Andréa W. Richa","Christian Scheideler","Joshua J. Daymude","Kristian Hinnenthal","Robert Gmyr","Thim Strothmann","Zahra Derakhshandeh","Alexandra Porter"],"categories":["research"],"content":"Self-Organizing Particle Systems (SOPS) is an abstraction of programmable matter, a substance with the ability to change its physical properties (shape, density, conductivity, etc.) in a programmable fashion. In order for programmable matter to live up to the dream of being an all-purpose \u0026quot;bucket of stuff\u0026quot; deployable for any task at any scale, we need a rich toolbox of algorithmic primitives upon which we can program more complex behaviors. Although the eventual vision is to control a whole mass of programmable matter as a single entity, our toolbox of primitives should be defined at the level of individual \u0026quot;atoms\u0026quot; of programmable matter to enable arbitrary scalability. Thus, we must take a distributed computing approach to defining micro-scale behaviors that collectively induce macro-scale phenomena.\nTowards this goal, self-organizing particle systems abstractly envision programmable matter as an ensemble of tiny computational units called particles. These particles are assumed to be very simple: they have very limited memory, no sense of orientation or direction, and only local movement and communication capabilities. Our formal model for these particle systems is the amoebot model, which provides a theoretical framework for developing and analyzing our distributed algorithms for particle systems.\n","date":1427846400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585166320,"objectID":"b53fa27f1b56ee6cdd9a3a47da67c933","permalink":"https://jdaymude.github.io/project/sops/","publishdate":"2015-04-01T00:00:00Z","relpermalink":"/project/sops/","section":"project","summary":"Abstracting programmable matter using the *amoebot model*. Developing distributed algorithms for tasks of self-organization. Rigorously analyzing these behaviors for provable guarantees on correctness, runtime, and reliability.","tags":["programmable-matter","distributed-algorithms"],"title":"Self-Organizing Particle Systems (SOPS)","type":"project"}]